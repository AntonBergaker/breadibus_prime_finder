main:
	; Initialize A to 3. Because of how the logic is set up to check A-(B+1) = 0 later, we don't check 2. 
	MW A 3

	; I solved the 2 problem guys.
	OUT 2

	; Start of the outer loop. A will be incremented by 1 every time we return here
	DEF _num_loop

		; B is the checkee, it's the number we try to divide with
		MW B 2

		; Inner loop, go through all numbers between 2 and A-1, and see if they're evenly divisible
		DEF _checkee_loop

			; division starts here
			; Move A into H for temporary working
			MW H A
			
			DEF _division_loop
				; Subtract until we overflow, which is the same thing as subtracting till we underflow because two complement shenanigans
				SUB H B
			JO _division_loop

			; Add H back, to turn H back into the remainder before it went negative
			ADD H B

			; If we have an even divisor, increment A and return to the main loop
			JZ H _increment

			; division ends here

			; Move B into H for temporary working
			MW H A
			; Subtract (B+1), if A = (B+1) it's 0 and we pass, so we exit before B equals A
			SUB H B
			SUB H 1
			JZ H _pass_checkee_loop
			
			; Loop again
			ADD B 1
		JMP _checkee_loop

		DEF _pass_checkee_loop

		; Print A if we reached this point, since we would've left earlier otherwise
		OUT A

		DEF _increment
		ADD A 1

		; If we overflowed, leave the program
		JO _gtfo
	JMP _num_loop
	DEF _gtfo

    HLT

; A - NUM TO CHECK
; B - CHECKEE
; H - GENERIC FOR MAFFS
; L - Unused
